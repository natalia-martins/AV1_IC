import sys
import os
import json  # Para salvar e carregar os pesos
sys.path.append(os.getcwd() + '/' + 'bibliotecas')

from bibliotecas.Dino_Game import *
import bibliotecas.Genetic_Algorithm as ga

class GA_Dino_Game(DinoGame):
    
    # Inicializa o jogo e define a primeira geração de dinossauros
    def __init__(self, first_init=True):
        super().__init__()

        if first_init == True:
            self.render_flag = True   # Define a flag de renderização
            self.high_score = []  # Armazena os recordes de pontuação

            # Cria uma nova população de dinossauros
            self.population_size = 200  # Tamanho da população de dinossauros
            self.generation = 1  # Número da geração atual
            self.active_dinos, self.all_dinos = ga.create_new_population(self.population_size)  # Cria uma nova população
            
    # Função para salvar os pesos do melhor dinossauro
    def salvar_pesos(self, melhor_dino):
        pesos = {
            'W1': melhor_dino.brain.neural_wiring['W1'].tolist(),  # Converte os numpy arrays em listas
            'b1': melhor_dino.brain.neural_wiring['b1'].tolist(),
            'W2': melhor_dino.brain.neural_wiring['W2'].tolist(),
            'b2': melhor_dino.brain.neural_wiring['b2'].tolist()
        }
        with open('pesos_melhor_individuo.json', 'w') as f:
            json.dump(pesos, f)
        print("Pesos do melhor indivíduo salvos com sucesso!")

    # Função para carregar os pesos do melhor dinossauro
    def carregar_pesos(self):
        with open('pesos_melhor_individuo.json', 'r') as f:
            pesos = json.load(f)

        # Converter as listas de volta para numpy arrays
        pesos_convertidos = {
            'W1': np.array(pesos['W1']),
            'b1': np.array(pesos['b1']),
            'W2': np.array(pesos['W2']),
            'b2': np.array(pesos['b2'])
        }
        return pesos_convertidos

    # Função para aplicar os pesos carregados em um dinossauro
    def aplicar_pesos(self, dino, pesos):
        dino.brain.neural_wiring['W1'] = pesos['W1']
        dino.brain.neural_wiring['b1'] = pesos['b1']
        dino.brain.neural_wiring['W2'] = pesos['W2']
        dino.brain.neural_wiring['b2'] = pesos['b2']
        print("Pesos aplicados com sucesso!")
            
    # Passo do jogo, avança um ciclo de frame
    def step(self):
        
        # Função para verificar se um dinossauro colidiu com um obstáculo
        def collision_check(dino):
            if len(self.obstacles) != 0:  # Verifica se há obstáculos no jogo
                obstacle_collided = self.obstacles[0].collide(dino)  # Verifica colisão com o primeiro obstáculo
                if obstacle_collided:
                    self.active_dinos.pop(self.active_dinos.index(dino))  # Remove o dinossauro ativo se ele colidir

        # Define o FPS para renderização
        if self.render_flag:
            self.clock.tick(self.FPS)  # Ajusta a velocidade do jogo de acordo com o FPS

        # Lida com eventos, como fechar a janela ou pressionar teclas
        for event in pg.event.get():
            if event.type == pg.QUIT:  # Se clicar para fechar a janela, fecha o jogo
                self.close()

            key = pg.key.get_pressed()  # Verifica se alguma tecla foi pressionada

            # Alterna a renderização ao pressionar a tecla "ESPAÇO"
            if key[pg.K_SPACE]:
                self.render_flag = not self.render_flag

            # Fecha o jogo se a tecla "ESC" for pressionada
            if key[pg.K_ESCAPE]:
                self.close()

        # Atualiza contadores e velocidade do jogo
        self.increment_counters()
        self.increment_gamespeed()

        # Verifica colisões várias vezes para corrigir um possível bug
        for dino in self.active_dinos:
            collision_check(dino)

        for dino in self.active_dinos:
            collision_check(dino)
            observation = dino.sense_environment(self.obstacles, self.vel)  # Dinossauro observa o ambiente
            action = dino.brain.think_about_action(observation)  # Dinossauro toma uma ação com base na observação
            dino.update(action)  # Atualiza o dinossauro com base na ação

        # Verifica colisões novamente
        for dino in self.active_dinos:
            collision_check(dino)

        # Se todos os dinossauros morreram, gera uma nova geração
        if len(self.active_dinos) == 0:

            # Adiciona uma linha em branco para separar visualmente
            print()
            

            print(f"Geração atual: {self.generation}")
            
            # Adiciona a pontuação atual à lista de recordes
            self.high_score.append(self.game_score)
            
            # Incrementa o contador de geração
            self.generation += 1
            
            # Imprime a pontuação atual da geração (antes de reiniciar a pontuação)
            print(f"Pontuação atual da geração: {self.game_score}")
            
            # Calcula a melhor pontuação até agora e imprime
            melhor_pontuacao_atual = max(self.high_score)
            print(f"Melhor pontuação até agora: {melhor_pontuacao_atual}")
            
            
            # Salva os pesos do melhor dinossauro
            melhor_dino = max(self.all_dinos, key=lambda dino: dino.fitness)
            self.salvar_pesos(melhor_dino)  # Salva os pesos do melhor dinossauro
            
            # Adiciona uma linha em branco para separar visualmente
            print()

            # Calcula o "fitness" de cada dinossauro
            self.all_dinos = ga.calculate_fitness(self.all_dinos)

            # Cria um pool de acasalamento com base no "fitness"
            dino_mating_pool = []
            dino_mating_pool = ga.create_mating_pool(self.all_dinos)

            # Cria a próxima geração de dinossauros
            self.all_dinos, self.active_dinos = ga.create_next_generation(self.population_size, dino_mating_pool)

            # Reinicia o ambiente do jogo, mas mantém a população
            self.reset_game(complete_init_flag=False)

        # Adiciona novos obstáculos e os movimenta
        self.add_obstacle()
        self.update_obstacles()

        # Cria nuvens e chão, necessário apenas durante a renderização
        if self.render_flag:
            self.add_clouds()
            self.add_ground()
            self.update_ground()
            self.update_clouds()

    # Renderiza o jogo
    def render(self):
        font = pg.font.SysFont('arial', 15)  # Define a fonte para os textos

        # Verifica se a renderização está ativada
        if self.render_flag:
            self.window.fill(self.window_color)  # Preenche a janela com a cor de fundo

            # Desenha os elementos do jogo (chão, nuvens, obstáculos e dinossauros)
            for i in self.grounds:
                i.draw(self.window)

            for i in self.clouds:
                i.draw(self.window)

            for i in self.obstacles:
                i.draw(self.window)

            for i in self.active_dinos:
                i.draw(self.window)

            # Exibe textos relacionados ao estado do jogo
            g_c = font.render('Pontuação Atual: ' + str(self.game_score), True, (0,0,0))
            self.window.blit(g_c, (580, 10))  # Exibe a pontuação atual
            d_a = font.render('Dinos vivos: ' + str(len(self.active_dinos)), True, (0,0,0))
            self.window.blit(d_a, (10, 10))  # Exibe o número de dinossauros vivos
            gen = font.render('Geração: ' + str(self.generation), True, (0,0,0))
            self.window.blit(gen, (200, 10))  # Exibe o número da geração atual
            if len(self.high_score) > 0:
                high = font.render('Recorde Total: ' + str(max(self.high_score)), True, (0,0,0))
                self.window.blit(high, (370, 10))  # Exibe o recorde total

        # Caso a renderização não esteja ativa, exibe instruções
        elif self.speed_counter % 40 == 0:
            a = 135
            b = 285
            self.window.fill(self.window_color)

            # Exibe instruções para o jogador
            bla = font.render('Pressione ESPAÇO para alternar o modo de renderização do jogo (roda mais rápido sem)', True, (0,0,0))
            self.window.blit(bla, (b, a))
            gen = font.render('Geração: ' + str(self.generation), True, (0,0,0))
            self.window.blit(gen, (b, a + 20))
            if len(self.active_dinos) > 0:
                dino_number = font.render('Dinos vivos: ' + str(len(self.active_dinos)), True, (0,0,0))
                self.window.blit(dino_number, (b, a + 40))  # Exibe o número de dinossauros vivos
            g_c = font.render('Pontuação Atual: ' + str(self.game_score), True, (0,0,0))
            self.window.blit(g_c, (b, a + 60))  # Exibe a pontuação atual
            if len(self.high_score) > 0:
                high = font.render('Recorde Total: ' + str(max(self.high_score)), True, (0,0,0))
                self.window.blit(high, (b, a + 80))  # Exibe o recorde total

        # Atualiza a tela
        pg.display.update()

    # Reinicia o jogo
    def reset_game(self, complete_init_flag):
        self.__init__(first_init=complete_init_flag)

if __name__ == '__main__':
    # Adiciona uma pausa de 2 segundos antes de iniciar o jogo
    print("O jogo começará em 2 segundos...")
    pg.time.delay(2000)  # Pausa de 2 segundos (2000 milissegundos)

    # Inicializa o ambiente de jogo
    env = GA_Dino_Game()
    
    while True:
        env.step()  # Avança um passo no jogo
        env.render()  # Renderiza o jogo na tela

    env.close()
